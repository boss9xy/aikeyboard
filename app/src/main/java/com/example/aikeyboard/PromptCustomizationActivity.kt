package com.example.aikeyboard

import android.os.Bundle
import android.util.Log
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.app.AlertDialog
import android.widget.EditText
import android.widget.Button
import androidx.appcompat.widget.SwitchCompat
import com.example.aikeyboard.R
import com.example.aikeyboard.models.Language
import com.example.aikeyboard.LanguageManager

class PromptCustomizationActivity : AppCompatActivity() {
    
    // AI Assistant
    private lateinit var aiAssistantPromptEditText: EditText
    private lateinit var aiAssistantButtonNameEditText: EditText
    private lateinit var aiAssistantPromptSwitch: SwitchCompat
    
    // GPT Ask
    private lateinit var gptAskPromptEditText: EditText
    private lateinit var gptAskButtonNameEditText: EditText
    private lateinit var gptAskPromptSwitch: SwitchCompat
    
    // DeepSeek Ask
    private lateinit var deepseekAskPromptEditText: EditText
    private lateinit var deepseekAskButtonNameEditText: EditText
    private lateinit var deepseekAskPromptSwitch: SwitchCompat
    
    // Olama Ask
    private lateinit var olamaAskPromptEditText: EditText
    private lateinit var olamaAskButtonNameEditText: EditText
    private lateinit var olamaAskPromptSwitch: SwitchCompat
    
               // GPT Continue
           private lateinit var gptContinuePromptEditText: EditText
           private lateinit var gptContinueButtonNameEditText: EditText
           private lateinit var gptContinuePromptSwitch: SwitchCompat

           // DeepSeek Translate
           private lateinit var deepseekTranslatePromptEditText: EditText
           private lateinit var deepseekTranslateButtonNameEditText: EditText
           private lateinit var deepseekTranslatePromptSwitch: SwitchCompat

           // GPT Suggest
           private lateinit var gptSuggestPromptEditText: EditText
           private lateinit var gptSuggestButtonNameEditText: EditText
           private lateinit var gptSuggestPromptSwitch: SwitchCompat

           // DeepSeek Suggest
           private lateinit var deepseekSuggestPromptEditText: EditText
           private lateinit var deepseekSuggestButtonNameEditText: EditText
           private lateinit var deepseekSuggestPromptSwitch: SwitchCompat

               // Text Format Button (Convert vƒÉn b·∫£n)
    private lateinit var askButtonPromptEditText: EditText
    private lateinit var askButtonNameEditText: EditText
    private lateinit var askButtonPromptSwitch: SwitchCompat

           // Olama Translate
           private lateinit var olamaTranslatePromptEditText: EditText
           private lateinit var olamaTranslateButtonNameEditText: EditText
           private lateinit var olamaTranslatePromptSwitch: SwitchCompat

           // GPT Translate
           private lateinit var gptTranslatePromptEditText: EditText
           private lateinit var gptTranslateButtonNameEditText: EditText
           private lateinit var gptTranslatePromptSwitch: SwitchCompat

           // GPT Spell Check
           private lateinit var gptSpellCheckPromptEditText: EditText
           private lateinit var gptSpellCheckButtonNameEditText: EditText
           private lateinit var gptSpellCheckPromptSwitch: SwitchCompat

           // DeepSeek Spell Check
           private lateinit var deepseekSpellCheckPromptEditText: EditText
           private lateinit var deepseekSpellCheckButtonNameEditText: EditText
           private lateinit var deepseekSpellCheckPromptSwitch: SwitchCompat
    
    // Buttons
    private lateinit var savePromptsButton: Button
    private lateinit var resetPromptsButton: Button
    
    private lateinit var languageManager: LanguageManager
    
    override fun onCreate(savedInstanceState: Bundle?) {
        Log.d("PromptCustomization", "üöÄ onCreate() B·∫ÆT ƒê·∫¶U")
        super.onCreate(savedInstanceState)
        Log.d("PromptCustomization", "‚úÖ super.onCreate() ho√†n th√†nh")
        
        try {
            Log.d("PromptCustomization", "üîµ B∆∞·ªõc 1: setContentView() b·∫Øt ƒë·∫ßu")
            setContentView(R.layout.activity_prompt_customization_test)
            Log.d("PromptCustomization", "‚úÖ setContentView() th√†nh c√¥ng")
            
            Log.d("PromptCustomization", "üîµ B∆∞·ªõc 2: initLanguageManager")
            languageManager = LanguageManager(this)
            Log.d("PromptCustomization", "‚úÖ initLanguageManager ho√†n th√†nh")
            
            Log.d("PromptCustomization", "üîµ B∆∞·ªõc 3: initViews")
            initViews()
            Log.d("PromptCustomization", "‚úÖ initViews ho√†n th√†nh")
            
            Log.d("PromptCustomization", "üîµ B∆∞·ªõc 4: loadSavedPrompts")
            loadSavedPrompts()
            Log.d("PromptCustomization", "‚úÖ loadSavedPrompts ho√†n th√†nh")
            
            Log.d("PromptCustomization", "üîµ B∆∞·ªõc 5: setupButtons")
            setupButtons()
            Log.d("PromptCustomization", "‚úÖ setupButtons ho√†n th√†nh")
            
            Log.d("PromptCustomization", "üéâ onCreate() HO√ÄN TH√ÄNH TH√ÄNH C√îNG")
        } catch (e: Exception) {
            Log.e("PromptCustomization", "‚ùå L·ªñI CRITICAL trong onCreate: ${e.message}", e)
            e.printStackTrace()
            
            // Ghi l·ªói v√†o SharedPreferences ƒë·ªÉ debug
            try {
                val prefs = getSharedPreferences("DebugLogs", MODE_PRIVATE)
                prefs.edit().apply {
                    putString("last_crash_time", System.currentTimeMillis().toString())
                    putString("last_crash_error", e.message ?: "Unknown error")
                    putString("last_crash_stack", e.stackTraceToString())
                    apply()
                }
                Log.d("PromptCustomization", "‚úÖ ƒê√£ l∆∞u debug logs")
            } catch (debugError: Exception) {
                Log.e("PromptCustomization", "‚ùå Kh√¥ng th·ªÉ l∆∞u debug logs: ${debugError.message}")
            }
            
            // Hi·ªÉn th·ªã c·∫£nh b√°o chi ti·∫øt
            try {
                val errorMessage = "L·ªói kh·ªüi t·∫°o: ${e.message}"
                Toast.makeText(this, errorMessage, Toast.LENGTH_LONG).show()
                
                // Hi·ªÉn th·ªã AlertDialog v·ªõi th√¥ng tin chi ti·∫øt
                AlertDialog.Builder(this)
                    .setTitle("‚ùå L·ªói Kh·ªüi t·∫°o")
                    .setMessage("L·ªói: ${e.message}\n\nStack trace:\n${e.stackTraceToString()}")
                    .setPositiveButton("OK") { _, _ -> finish() }
                    .setCancelable(false)
                    .show()
            } catch (uiError: Exception) {
                Log.e("PromptCustomization", "‚ùå Kh√¥ng th·ªÉ hi·ªÉn th·ªã UI error: ${uiError.message}")
                finish()
            }
        }
    }
    
    private fun initViews() {
        Log.d("PromptCustomization", "üîç initViews() B·∫ÆT ƒê·∫¶U")
        try {
            // AI Assistant
            Log.d("PromptCustomization", "üîµ T√¨m AI Assistant views...")
            aiAssistantPromptEditText = findViewById<EditText>(R.id.aiAssistantPromptEditText)
            aiAssistantButtonNameEditText = findViewById<EditText>(R.id.aiAssistantButtonNameEditText)
            aiAssistantPromptSwitch = findViewById<SwitchCompat>(R.id.aiAssistantPromptSwitch)
            Log.d("PromptCustomization", "‚úÖ AI Assistant views t√¨m th·∫•y th√†nh c√¥ng")
            
            // GPT Ask
            Log.d("PromptCustomization", "üîµ T√¨m GPT Ask views...")
            gptAskPromptEditText = findViewById<EditText>(R.id.gptAskPromptEditText)
            gptAskButtonNameEditText = findViewById<EditText>(R.id.gptAskButtonNameEditText)
            gptAskPromptSwitch = findViewById<SwitchCompat>(R.id.gptAskPromptSwitch)
            Log.d("PromptCustomization", "‚úÖ GPT Ask views t√¨m th·∫•y th√†nh c√¥ng")
            
            // DeepSeek Ask
            Log.d("PromptCustomization", "üîµ T√¨m DeepSeek Ask views...")
            deepseekAskPromptEditText = findViewById<EditText>(R.id.deepseekAskPromptEditText)
            deepseekAskButtonNameEditText = findViewById<EditText>(R.id.deepseekAskButtonNameEditText)
            deepseekAskPromptSwitch = findViewById<SwitchCompat>(R.id.deepseekAskPromptSwitch)
            Log.d("PromptCustomization", "‚úÖ DeepSeek Ask views t√¨m th·∫•y th√†nh c√¥ng")
            
            // Olama Ask
            Log.d("PromptCustomization", "üîµ T√¨m Olama Ask views...")
            olamaAskPromptEditText = findViewById<EditText>(R.id.olamaAskPromptEditText)
            olamaAskButtonNameEditText = findViewById<EditText>(R.id.olamaAskButtonNameEditText)
            olamaAskPromptSwitch = findViewById<SwitchCompat>(R.id.olamaAskPromptSwitch)
            Log.d("PromptCustomization", "‚úÖ Olama Ask views t√¨m th·∫•y th√†nh c√¥ng")
            
            // GPT Continue
            Log.d("PromptCustomization", "üîµ T√¨m GPT Continue views...")
            gptContinuePromptEditText = findViewById<EditText>(R.id.gptContinuePromptEditText)
            gptContinueButtonNameEditText = findViewById<EditText>(R.id.gptContinueButtonNameEditText)
            gptContinuePromptSwitch = findViewById<SwitchCompat>(R.id.gptContinuePromptSwitch)
            Log.d("PromptCustomization", "‚úÖ GPT Continue views t√¨m th·∫•y th√†nh c√¥ng")
            
            // DeepSeek Translate
            Log.d("PromptCustomization", "üîµ T√¨m DeepSeek Translate views...")
            deepseekTranslatePromptEditText = findViewById<EditText>(R.id.deepseekTranslatePromptEditText)
            deepseekTranslateButtonNameEditText = findViewById<EditText>(R.id.deepseekTranslateButtonNameEditText)
            deepseekTranslatePromptSwitch = findViewById<SwitchCompat>(R.id.deepseekTranslatePromptSwitch)
            Log.d("PromptCustomization", "‚úÖ DeepSeek Translate views t√¨m th·∫•y th√†nh c√¥ng")
            
            // GPT Suggest
            Log.d("PromptCustomization", "üîµ T√¨m GPT Suggest views...")
            gptSuggestPromptEditText = findViewById<EditText>(R.id.gptSuggestPromptEditText)
            gptSuggestButtonNameEditText = findViewById<EditText>(R.id.gptSuggestButtonNameEditText)
            gptSuggestPromptSwitch = findViewById<SwitchCompat>(R.id.gptSuggestPromptSwitch)
            Log.d("PromptCustomization", "‚úÖ GPT Suggest views t√¨m th·∫•y th√†nh c√¥ng")
            
            // DeepSeek Suggest
            Log.d("PromptCustomization", "üîµ T√¨m DeepSeek Suggest views...")
            deepseekSuggestPromptEditText = findViewById<EditText>(R.id.deepseekSuggestPromptEditText)
            deepseekSuggestButtonNameEditText = findViewById<EditText>(R.id.deepseekSuggestButtonNameEditText)
            deepseekSuggestPromptSwitch = findViewById<SwitchCompat>(R.id.deepseekSuggestPromptSwitch)
            Log.d("PromptCustomization", "‚úÖ DeepSeek Suggest views t√¨m th·∫•y th√†nh c√¥ng")
            
            // Text Format Button (Convert vƒÉn b·∫£n)
            Log.d("PromptCustomization", "üîµ T√¨m Text Format Button views...")
            askButtonPromptEditText = findViewById<EditText>(R.id.askButtonPromptEditText)
            askButtonNameEditText = findViewById<EditText>(R.id.askButtonNameEditText)
            askButtonPromptSwitch = findViewById<SwitchCompat>(R.id.askButtonPromptSwitch)
            Log.d("PromptCustomization", "‚úÖ Text Format Button views t√¨m th·∫•y th√†nh c√¥ng")
            
            // Olama Translate
            Log.d("PromptCustomization", "üîµ T√¨m Olama Translate views...")
            olamaTranslatePromptEditText = findViewById<EditText>(R.id.olamaTranslatePromptEditText)
            olamaTranslateButtonNameEditText = findViewById<EditText>(R.id.olamaTranslateButtonNameEditText)
            olamaTranslatePromptSwitch = findViewById<SwitchCompat>(R.id.olamaTranslatePromptSwitch)
            Log.d("PromptCustomization", "‚úÖ Olama Translate views t√¨m th·∫•y th√†nh c√¥ng")
            
            // GPT Translate
            Log.d("PromptCustomization", "üîµ T√¨m GPT Translate views...")
            gptTranslatePromptEditText = findViewById<EditText>(R.id.gptTranslatePromptEditText)
            gptTranslateButtonNameEditText = findViewById<EditText>(R.id.gptTranslateButtonNameEditText)
            gptTranslatePromptSwitch = findViewById<SwitchCompat>(R.id.gptTranslatePromptSwitch)
            Log.d("PromptCustomization", "‚úÖ GPT Translate views t√¨m th·∫•y th√†nh c√¥ng")
            
            // GPT Spell Check
            Log.d("PromptCustomization", "üîµ T√¨m GPT Spell Check views...")
            gptSpellCheckPromptEditText = findViewById<EditText>(R.id.gptSpellCheckPromptEditText)
            gptSpellCheckButtonNameEditText = findViewById<EditText>(R.id.gptSpellCheckButtonNameEditText)
            gptSpellCheckPromptSwitch = findViewById<SwitchCompat>(R.id.gptSpellCheckPromptSwitch)
            Log.d("PromptCustomization", "‚úÖ GPT Spell Check views t√¨m th·∫•y th√†nh c√¥ng")
            
            // DeepSeek Spell Check
            Log.d("PromptCustomization", "üîµ T√¨m DeepSeek Spell Check views...")
            deepseekSpellCheckPromptEditText = findViewById<EditText>(R.id.deepseekSpellCheckPromptEditText)
            deepseekSpellCheckButtonNameEditText = findViewById<EditText>(R.id.deepseekSpellCheckButtonNameEditText)
            deepseekSpellCheckPromptSwitch = findViewById<SwitchCompat>(R.id.deepseekSpellCheckPromptSwitch)
            Log.d("PromptCustomization", "‚úÖ DeepSeek Spell Check views t√¨m th·∫•y th√†nh c√¥ng")
            
            // Buttons
            Log.d("PromptCustomization", "üîµ T√¨m buttons...")
            savePromptsButton = findViewById<Button>(R.id.savePromptsButton)
            resetPromptsButton = findViewById<Button>(R.id.resetPromptsButton)
            Log.d("PromptCustomization", "‚úÖ Buttons t√¨m th·∫•y th√†nh c√¥ng")
            
            Log.d("PromptCustomization", "‚úÖ initViews() HO√ÄN TH√ÄNH")
        } catch (e: Exception) {
            Log.e("PromptCustomization", "‚ùå L·ªói trong initViews: ${e.message}", e)
            throw e
        }
    }
    
    private fun loadSavedPrompts() {
        Log.d("PromptCustomization", "üîç loadSavedPrompts() B·∫ÆT ƒê·∫¶U")
        try {
            Log.d("PromptCustomization", "üîµ L·∫•y SharedPreferences...")
            val prefs = getSharedPreferences("AIKeyboardPrefs", MODE_PRIVATE)
            Log.d("PromptCustomization", "‚úÖ SharedPreferences l·∫•y th√†nh c√¥ng")
            
            // Load AI Assistant
            Log.d("PromptCustomization", "üîµ Load AI Assistant...")
            val aiAssistantPrompt = prefs.getString("prompt_ai_assistant", getDefaultAIAssistantPrompt())
            aiAssistantPromptEditText.setText(aiAssistantPrompt)
            val aiAssistantButtonName = prefs.getString("button_name_ai_assistant", getDefaultAIAssistantButtonName())
            aiAssistantButtonNameEditText.setText(aiAssistantButtonName)
            val aiAssistantPromptEnabled = prefs.getBoolean("prompt_enabled_ai_assistant", false)
            aiAssistantPromptSwitch.isChecked = aiAssistantPromptEnabled
            Log.d("PromptCustomization", "‚úÖ AI Assistant loaded th√†nh c√¥ng")
            
            // Load GPT Ask
            Log.d("PromptCustomization", "üîµ Load GPT Ask...")
            val gptAskPrompt = prefs.getString("prompt_gpt_ask", getDefaultGPTAskPrompt())
            gptAskPromptEditText.setText(gptAskPrompt)
            val gptAskButtonName = prefs.getString("button_name_gpt_ask", getDefaultGPTAskButtonName())
            gptAskButtonNameEditText.setText(gptAskButtonName)
            val gptAskPromptEnabled = prefs.getBoolean("prompt_enabled_gpt_ask", false)
            gptAskPromptSwitch.isChecked = gptAskPromptEnabled
            Log.d("PromptCustomization", "‚úÖ GPT Ask loaded th√†nh c√¥ng")
            
            // Load DeepSeek Ask
            Log.d("PromptCustomization", "üîµ Load DeepSeek Ask...")
            val deepseekAskPrompt = prefs.getString("prompt_deepseek_ask", getDefaultDeepSeekAskPrompt())
            deepseekAskPromptEditText.setText(deepseekAskPrompt)
            val deepseekAskButtonName = prefs.getString("button_name_deepseek_ask", getDefaultDeepSeekAskButtonName())
            deepseekAskButtonNameEditText.setText(deepseekAskButtonName)
            val deepseekAskPromptEnabled = prefs.getBoolean("prompt_enabled_deepseek_ask", false)
            deepseekAskPromptSwitch.isChecked = deepseekAskPromptEnabled
            Log.d("PromptCustomization", "‚úÖ DeepSeek Ask loaded th√†nh c√¥ng")
            
            // Load Olama Ask
            Log.d("PromptCustomization", "üîµ Load Olama Ask...")
            val olamaAskPrompt = prefs.getString("prompt_olama_ask", getDefaultOlamaAskPrompt())
            olamaAskPromptEditText.setText(olamaAskPrompt)
            val olamaAskButtonName = prefs.getString("button_name_olama_ask", getDefaultOlamaAskButtonName())
            olamaAskButtonNameEditText.setText(olamaAskButtonName)
            val olamaAskPromptEnabled = prefs.getBoolean("prompt_enabled_olama_ask", false)
            olamaAskPromptSwitch.isChecked = olamaAskPromptEnabled
            Log.d("PromptCustomization", "‚úÖ Olama Ask loaded th√†nh c√¥ng")
            
            // Load GPT Continue
            Log.d("PromptCustomization", "üîµ Load GPT Continue...")
            val gptContinuePrompt = prefs.getString("prompt_gpt_continue", getDefaultGPTContinuePrompt())
            gptContinuePromptEditText.setText(gptContinuePrompt)
            val gptContinueButtonName = prefs.getString("button_name_gpt_continue", getDefaultGPTContinueButtonName())
            gptContinueButtonNameEditText.setText(gptContinueButtonName)
            val gptContinuePromptEnabled = prefs.getBoolean("prompt_enabled_gpt_continue", false)
            gptContinuePromptSwitch.isChecked = gptContinuePromptEnabled
            Log.d("PromptCustomization", "‚úÖ GPT Continue loaded th√†nh c√¥ng")
            
            // Load DeepSeek Translate
            Log.d("PromptCustomization", "üîµ Load DeepSeek Translate...")
            val deepseekTranslatePrompt = prefs.getString("prompt_deepseek_translate", getDefaultDeepSeekTranslatePrompt())
            deepseekTranslatePromptEditText.setText(deepseekTranslatePrompt)
            val deepseekTranslateButtonName = prefs.getString("button_name_deepseek_translate", getDefaultDeepSeekTranslateButtonName())
            deepseekTranslateButtonNameEditText.setText(deepseekTranslateButtonName)
            val deepseekTranslatePromptEnabled = prefs.getBoolean("prompt_enabled_deepseek_translate", false)
            deepseekTranslatePromptSwitch.isChecked = deepseekTranslatePromptEnabled
            Log.d("PromptCustomization", "‚úÖ DeepSeek Translate loaded th√†nh c√¥ng")
            
            // Load GPT Suggest
            Log.d("PromptCustomization", "üîµ Load GPT Suggest...")
            val gptSuggestPrompt = prefs.getString("prompt_gpt_suggest", getDefaultGPTSuggestPrompt())
            gptSuggestPromptEditText.setText(gptSuggestPrompt)
            val gptSuggestButtonName = prefs.getString("button_name_gpt_suggest", getDefaultGPTSuggestButtonName())
            gptSuggestButtonNameEditText.setText(gptSuggestButtonName)
            val gptSuggestPromptEnabled = prefs.getBoolean("prompt_enabled_gpt_suggest", false)
            gptSuggestPromptSwitch.isChecked = gptSuggestPromptEnabled
            Log.d("PromptCustomization", "‚úÖ GPT Suggest loaded th√†nh c√¥ng")
            
            // Load DeepSeek Suggest
            Log.d("PromptCustomization", "üîµ Load DeepSeek Suggest...")
            val deepseekSuggestPrompt = prefs.getString("prompt_deepseek_suggest", getDefaultDeepSeekSuggestPrompt())
            deepseekSuggestPromptEditText.setText(deepseekSuggestPrompt)
            val deepseekSuggestButtonName = prefs.getString("button_name_deepseek_suggest", getDefaultDeepSeekSuggestButtonName())
            deepseekSuggestButtonNameEditText.setText(deepseekSuggestButtonName)
            val deepseekSuggestPromptEnabled = prefs.getBoolean("prompt_enabled_deepseek_suggest", false)
            deepseekSuggestPromptSwitch.isChecked = deepseekSuggestPromptEnabled
            Log.d("PromptCustomization", "‚úÖ DeepSeek Suggest loaded th√†nh c√¥ng")
            
            // Load Ask Button
            Log.d("PromptCustomization", "üîµ Load Ask Button...")
            val askButtonPrompt = prefs.getString("prompt_ask_button", getDefaultAskButtonPrompt())
            askButtonPromptEditText.setText(askButtonPrompt)
            val askButtonName = prefs.getString("button_name_ask_button", getDefaultAskButtonName())
            askButtonNameEditText.setText(askButtonName)
            val askButtonPromptEnabled = prefs.getBoolean("prompt_enabled_ask_button", false)
            askButtonPromptSwitch.isChecked = askButtonPromptEnabled
            Log.d("PromptCustomization", "‚úÖ Ask Button loaded th√†nh c√¥ng")
            
            // Load Olama Translate
            Log.d("PromptCustomization", "üîµ Load Olama Translate...")
            val olamaTranslatePrompt = prefs.getString("prompt_olama_translate", getDefaultOlamaTranslatePrompt())
            olamaTranslatePromptEditText.setText(olamaTranslatePrompt)
            val olamaTranslateButtonName = prefs.getString("button_name_olama_translate", getDefaultOlamaTranslateButtonName())
            olamaTranslateButtonNameEditText.setText(olamaTranslateButtonName)
            val olamaTranslatePromptEnabled = prefs.getBoolean("prompt_enabled_olama_translate", false)
            olamaTranslatePromptSwitch.isChecked = olamaTranslatePromptEnabled
            Log.d("PromptCustomization", "‚úÖ Olama Translate loaded th√†nh c√¥ng")
            
            // Load GPT Translate
            Log.d("PromptCustomization", "üîµ Load GPT Translate...")
            val gptTranslatePrompt = prefs.getString("prompt_gpt_translate", getDefaultGPTTranslatePrompt())
            gptTranslatePromptEditText.setText(gptTranslatePrompt)
            val gptTranslateButtonName = prefs.getString("button_name_gpt_translate", getDefaultGPTTranslateButtonName())
            gptTranslateButtonNameEditText.setText(gptTranslateButtonName)
            val gptTranslatePromptEnabled = prefs.getBoolean("prompt_enabled_gpt_translate", false)
            gptTranslatePromptSwitch.isChecked = gptTranslatePromptEnabled
            Log.d("PromptCustomization", "‚úÖ GPT Translate loaded th√†nh c√¥ng")
            
            // Load GPT Spell Check
            Log.d("PromptCustomization", "üîµ Load GPT Spell Check...")
            val gptSpellCheckPrompt = prefs.getString("prompt_gpt_spell_check", getDefaultGPTSpellCheckPrompt())
            gptSpellCheckPromptEditText.setText(gptSpellCheckPrompt)
            val gptSpellCheckButtonName = prefs.getString("button_name_gpt_spell_check", getDefaultGPTSpellCheckButtonName())
            gptSpellCheckButtonNameEditText.setText(gptSpellCheckButtonName)
            val gptSpellCheckPromptEnabled = prefs.getBoolean("prompt_enabled_gpt_spell_check", false)
            gptSpellCheckPromptSwitch.isChecked = gptSpellCheckPromptEnabled
            Log.d("PromptCustomization", "‚úÖ GPT Spell Check loaded th√†nh c√¥ng")
            
            // Load DeepSeek Spell Check
            Log.d("PromptCustomization", "üîµ Load DeepSeek Spell Check...")
            val deepseekSpellCheckPrompt = prefs.getString("prompt_deepseek_spell_check", getDefaultDeepSeekSpellCheckPrompt())
            deepseekSpellCheckPromptEditText.setText(deepseekSpellCheckPrompt)
            val deepseekSpellCheckButtonName = prefs.getString("button_name_deepseek_spell_check", getDefaultDeepSeekSpellCheckButtonName())
            deepseekSpellCheckButtonNameEditText.setText(deepseekSpellCheckButtonName)
            val deepseekSpellCheckPromptEnabled = prefs.getBoolean("prompt_enabled_deepseek_spell_check", false)
            deepseekSpellCheckPromptSwitch.isChecked = deepseekSpellCheckPromptEnabled
            Log.d("PromptCustomization", "‚úÖ DeepSeek Spell Check loaded th√†nh c√¥ng")
            
            Log.d("PromptCustomization", "‚úÖ loadSavedPrompts() HO√ÄN TH√ÄNH")
        } catch (e: Exception) {
            Log.e("PromptCustomization", "‚ùå L·ªói trong loadSavedPrompts: ${e.message}", e)
            throw e
        }
    }
    
    private fun setupButtons() {
        Log.d("PromptCustomization", "üîç setupButtons() B·∫ÆT ƒê·∫¶U")
        try {
            Log.d("PromptCustomization", "üîµ Setup savePromptsButton...")
            savePromptsButton.setOnClickListener {
                Log.d("PromptCustomization", "üîµ Save button clicked")
                savePrompts()
            }
            Log.d("PromptCustomization", "‚úÖ savePromptsButton setup th√†nh c√¥ng")
            
            Log.d("PromptCustomization", "üîµ Setup resetPromptsButton...")
            resetPromptsButton.setOnClickListener {
                Log.d("PromptCustomization", "üîµ Reset button clicked")
                resetToDefaults()
            }
            Log.d("PromptCustomization", "‚úÖ resetPromptsButton setup th√†nh c√¥ng")
            
            Log.d("PromptCustomization", "‚úÖ setupButtons() HO√ÄN TH√ÄNH")
        } catch (e: Exception) {
            Log.e("PromptCustomization", "‚ùå L·ªói trong setupButtons: ${e.message}", e)
            throw e
        }
    }
    
    private fun savePrompts() {
        Log.d("PromptCustomization", "üîç savePrompts() B·∫ÆT ƒê·∫¶U")
        try {
            Log.d("PromptCustomization", "üîµ L·∫•y SharedPreferences cho save...")
            val prefs = getSharedPreferences("AIKeyboardPrefs", MODE_PRIVATE)
            val editor = prefs.edit()
            Log.d("PromptCustomization", "‚úÖ SharedPreferences editor t·∫°o th√†nh c√¥ng")
            
            // Save AI Assistant
            Log.d("PromptCustomization", "üîµ Save AI Assistant...")
            editor.putString("prompt_ai_assistant", aiAssistantPromptEditText.text.toString())
            editor.putString("button_name_ai_assistant", aiAssistantButtonNameEditText.text.toString())
            editor.putBoolean("prompt_enabled_ai_assistant", aiAssistantPromptSwitch.isChecked)
            
            // Save GPT Ask
            Log.d("PromptCustomization", "üîµ Save GPT Ask...")
            editor.putString("prompt_gpt_ask", gptAskPromptEditText.text.toString())
            editor.putString("button_name_gpt_ask", gptAskButtonNameEditText.text.toString())
            editor.putBoolean("prompt_enabled_gpt_ask", gptAskPromptSwitch.isChecked)
            
            // Save DeepSeek Ask
            Log.d("PromptCustomization", "üîµ Save DeepSeek Ask...")
            editor.putString("prompt_deepseek_ask", deepseekAskPromptEditText.text.toString())
            editor.putString("button_name_deepseek_ask", deepseekAskButtonNameEditText.text.toString())
            editor.putBoolean("prompt_enabled_deepseek_ask", deepseekAskPromptSwitch.isChecked)
            
            // Save Olama Ask
            Log.d("PromptCustomization", "üîµ Save Olama Ask...")
            editor.putString("prompt_olama_ask", olamaAskPromptEditText.text.toString())
            editor.putString("button_name_olama_ask", olamaAskButtonNameEditText.text.toString())
            editor.putBoolean("prompt_enabled_olama_ask", olamaAskPromptSwitch.isChecked)
            
            // Save GPT Continue
            Log.d("PromptCustomization", "üîµ Save GPT Continue...")
            editor.putString("prompt_gpt_continue", gptContinuePromptEditText.text.toString())
            editor.putString("button_name_gpt_continue", gptContinueButtonNameEditText.text.toString())
            editor.putBoolean("prompt_enabled_gpt_continue", gptContinuePromptSwitch.isChecked)
            
            // Save DeepSeek Translate
            Log.d("PromptCustomization", "üîµ Save DeepSeek Translate...")
            editor.putString("prompt_deepseek_translate", deepseekTranslatePromptEditText.text.toString())
            editor.putString("button_name_deepseek_translate", deepseekTranslateButtonNameEditText.text.toString())
            editor.putBoolean("prompt_enabled_deepseek_translate", deepseekTranslatePromptSwitch.isChecked)
            
            // Save GPT Suggest
            Log.d("PromptCustomization", "üîµ Save GPT Suggest...")
            editor.putString("prompt_gpt_suggest", gptSuggestPromptEditText.text.toString())
            editor.putString("button_name_gpt_suggest", gptSuggestButtonNameEditText.text.toString())
            editor.putBoolean("prompt_enabled_gpt_suggest", gptSuggestPromptSwitch.isChecked)
            
            // Save DeepSeek Suggest
            Log.d("PromptCustomization", "üîµ Save DeepSeek Suggest...")
            editor.putString("prompt_deepseek_suggest", deepseekSuggestPromptEditText.text.toString())
            editor.putString("button_name_deepseek_suggest", deepseekSuggestButtonNameEditText.text.toString())
            editor.putBoolean("prompt_enabled_deepseek_suggest", deepseekSuggestPromptSwitch.isChecked)
            
            // Save Ask Button
            Log.d("PromptCustomization", "üîµ Save Ask Button...")
            editor.putString("prompt_ask_button", askButtonPromptEditText.text.toString())
            editor.putString("button_name_ask_button", askButtonNameEditText.text.toString())
            editor.putBoolean("prompt_enabled_ask_button", askButtonPromptSwitch.isChecked)
            
            // Save Olama Translate
            Log.d("PromptCustomization", "üîµ Save Olama Translate...")
            editor.putString("prompt_olama_translate", olamaTranslatePromptEditText.text.toString())
            editor.putString("button_name_olama_translate", olamaTranslateButtonNameEditText.text.toString())
            editor.putBoolean("prompt_enabled_olama_translate", olamaTranslatePromptSwitch.isChecked)
            
            // Save GPT Translate
            Log.d("PromptCustomization", "üîµ Save GPT Translate...")
            editor.putString("prompt_gpt_translate", gptTranslatePromptEditText.text.toString())
            editor.putString("button_name_gpt_translate", gptTranslateButtonNameEditText.text.toString())
            editor.putBoolean("prompt_enabled_gpt_translate", gptTranslatePromptSwitch.isChecked)
            
            // Save GPT Spell Check
            Log.d("PromptCustomization", "üîµ Save GPT Spell Check...")
            editor.putString("prompt_gpt_spell_check", gptSpellCheckPromptEditText.text.toString())
            editor.putString("button_name_gpt_spell_check", gptSpellCheckButtonNameEditText.text.toString())
            editor.putBoolean("prompt_enabled_gpt_spell_check", gptSpellCheckPromptSwitch.isChecked)
            
            // Save DeepSeek Spell Check
            Log.d("PromptCustomization", "üîµ Save DeepSeek Spell Check...")
            editor.putString("prompt_deepseek_spell_check", deepseekSpellCheckPromptEditText.text.toString())
            editor.putString("button_name_deepseek_spell_check", deepseekSpellCheckButtonNameEditText.text.toString())
            editor.putBoolean("prompt_enabled_deepseek_spell_check", deepseekSpellCheckPromptSwitch.isChecked)
            
            Log.d("PromptCustomization", "üîµ Apply changes...")
            editor.apply()
            Log.d("PromptCustomization", "‚úÖ Changes applied th√†nh c√¥ng")
            
            Toast.makeText(this, "ƒê√£ l∆∞u prompts th√†nh c√¥ng!", Toast.LENGTH_SHORT).show()
            Log.d("PromptCustomization", "‚úÖ savePrompts() HO√ÄN TH√ÄNH")
        } catch (e: Exception) {
            Log.e("PromptCustomization", "‚ùå L·ªói trong savePrompts: ${e.message}", e)
            Toast.makeText(this, "L·ªói l∆∞u prompts: ${e.message}", Toast.LENGTH_LONG).show()
        }
    }
    
    private fun resetToDefaults() {
        Log.d("PromptCustomization", "üîç resetToDefaults() B·∫ÆT ƒê·∫¶U")
        try {
            // Reset AI Assistant
            Log.d("PromptCustomization", "üîµ Reset AI Assistant...")
            aiAssistantPromptEditText.setText(getDefaultAIAssistantPrompt())
            aiAssistantButtonNameEditText.setText(getDefaultAIAssistantButtonName())
            aiAssistantPromptSwitch.isChecked = false
            
            // Reset GPT Ask
            Log.d("PromptCustomization", "üîµ Reset GPT Ask...")
            gptAskPromptEditText.setText(getDefaultGPTAskPrompt())
            gptAskButtonNameEditText.setText(getDefaultGPTAskButtonName())
            gptAskPromptSwitch.isChecked = false
            
            // Reset DeepSeek Ask
            Log.d("PromptCustomization", "üîµ Reset DeepSeek Ask...")
            deepseekAskPromptEditText.setText(getDefaultDeepSeekAskPrompt())
            deepseekAskButtonNameEditText.setText(getDefaultDeepSeekAskButtonName())
            deepseekAskPromptSwitch.isChecked = false
            
            // Reset Olama Ask
            Log.d("PromptCustomization", "üîµ Reset Olama Ask...")
            olamaAskPromptEditText.setText(getDefaultOlamaAskPrompt())
            olamaAskButtonNameEditText.setText(getDefaultOlamaAskButtonName())
            olamaAskPromptSwitch.isChecked = false
            
            // Reset GPT Continue
            Log.d("PromptCustomization", "üîµ Reset GPT Continue...")
            gptContinuePromptEditText.setText(getDefaultGPTContinuePrompt())
            gptContinueButtonNameEditText.setText(getDefaultGPTContinueButtonName())
            gptContinuePromptSwitch.isChecked = false
            
            // Reset DeepSeek Translate
            Log.d("PromptCustomization", "üîµ Reset DeepSeek Translate...")
            deepseekTranslatePromptEditText.setText(getDefaultDeepSeekTranslatePrompt())
            deepseekTranslateButtonNameEditText.setText(getDefaultDeepSeekTranslateButtonName())
            deepseekTranslatePromptSwitch.isChecked = false
            
            // Reset GPT Suggest
            Log.d("PromptCustomization", "üîµ Reset GPT Suggest...")
            gptSuggestPromptEditText.setText(getDefaultGPTSuggestPrompt())
            gptSuggestButtonNameEditText.setText(getDefaultGPTSuggestButtonName())
            gptSuggestPromptSwitch.isChecked = false
            
            // Reset DeepSeek Suggest
            Log.d("PromptCustomization", "üîµ Reset DeepSeek Suggest...")
            deepseekSuggestPromptEditText.setText(getDefaultDeepSeekSuggestPrompt())
            deepseekSuggestButtonNameEditText.setText(getDefaultDeepSeekSuggestButtonName())
            deepseekSuggestPromptSwitch.isChecked = false
            
            // Reset Ask Button
            Log.d("PromptCustomization", "üîµ Reset Ask Button...")
            askButtonPromptEditText.setText(getDefaultAskButtonPrompt())
            askButtonNameEditText.setText(getDefaultAskButtonName())
            askButtonPromptSwitch.isChecked = false
            
            // Reset Olama Translate
            Log.d("PromptCustomization", "üîµ Reset Olama Translate...")
            olamaTranslatePromptEditText.setText(getDefaultOlamaTranslatePrompt())
            olamaTranslateButtonNameEditText.setText(getDefaultOlamaTranslateButtonName())
            olamaTranslatePromptSwitch.isChecked = false
            
            // Reset GPT Translate
            Log.d("PromptCustomization", "üîµ Reset GPT Translate...")
            gptTranslatePromptEditText.setText(getDefaultGPTTranslatePrompt())
            gptTranslateButtonNameEditText.setText(getDefaultGPTTranslateButtonName())
            gptTranslatePromptSwitch.isChecked = false
            
            // Reset GPT Spell Check
            Log.d("PromptCustomization", "üîµ Reset GPT Spell Check...")
            gptSpellCheckPromptEditText.setText(getDefaultGPTSpellCheckPrompt())
            gptSpellCheckButtonNameEditText.setText(getDefaultGPTSpellCheckButtonName())
            gptSpellCheckPromptSwitch.isChecked = false
            
            // Reset DeepSeek Spell Check
            Log.d("PromptCustomization", "üîµ Reset DeepSeek Spell Check...")
            deepseekSpellCheckPromptEditText.setText(getDefaultDeepSeekSpellCheckPrompt())
            deepseekSpellCheckButtonNameEditText.setText(getDefaultDeepSeekSpellCheckButtonName())
            deepseekSpellCheckPromptSwitch.isChecked = false
            
            Toast.makeText(this, "ƒê√£ kh√¥i ph·ª•c m·∫∑c ƒë·ªãnh!", Toast.LENGTH_SHORT).show()
            Log.d("PromptCustomization", "‚úÖ resetToDefaults() HO√ÄN TH√ÄNH")
        } catch (e: Exception) {
            Log.e("PromptCustomization", "‚ùå L·ªói trong resetToDefaults: ${e.message}", e)
            Toast.makeText(this, "L·ªói kh√¥i ph·ª•c m·∫∑c ƒë·ªãnh: ${e.message}", Toast.LENGTH_LONG).show()
        }
    }
    
    // Default prompts
    private fun getDefaultAIAssistantPrompt(): String {
        val currentLanguage = languageManager.getCurrentLanguage()
        return when (currentLanguage) {
            Language.VIETNAMESE -> "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh v√† h·ªØu √≠ch. H√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng m·ªôt c√°ch ng·∫Øn g·ªçn, ch√≠nh x√°c v√† d·ªÖ hi·ªÉu. N·∫øu c√¢u h·ªèi kh√¥ng r√µ r√†ng, h√£y y√™u c·∫ßu l√†m r√µ th√™m."
            Language.ENGLISH -> "You are a smart and helpful AI assistant. Please answer the user's question concisely, accurately and understandably. If the question is unclear, please ask for clarification."
            else -> "You are a smart and helpful AI assistant. Please answer the user's question concisely, accurately and understandably. If the question is unclear, please ask for clarification."
        }
    }
    
    private fun getDefaultGPTAskPrompt(): String {
        val currentLanguage = languageManager.getCurrentLanguage()
        return when (currentLanguage) {
            Language.VIETNAMESE -> "B·∫°n l√† m·ªôt AI th√¥ng minh ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi OpenAI. H√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng m·ªôt c√°ch ch√≠nh x√°c, h·ªØu √≠ch v√† an to√†n."
            Language.ENGLISH -> "You are an intelligent AI developed by OpenAI. Please answer the user's question accurately, helpfully and safely."
            else -> "You are an intelligent AI developed by OpenAI. Please answer the user's question accurately, helpfully and safely."
        }
    }
    
    private fun getDefaultDeepSeekAskPrompt(): String {
        val currentLanguage = languageManager.getCurrentLanguage()
        return when (currentLanguage) {
            Language.VIETNAMESE -> "B·∫°n l√† DeepSeek AI, m·ªôt AI th√¥ng minh v√† hi·ªÉu bi·∫øt s√¢u r·ªông. H√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng m·ªôt c√°ch chi ti·∫øt v√† ch√≠nh x√°c."
            Language.ENGLISH -> "You are DeepSeek AI, an intelligent and knowledgeable AI. Please answer the user's question in detail and accurately."
            else -> "You are DeepSeek AI, an intelligent and knowledgeable AI. Please answer the user's question in detail and accurately."
        }
    }
    
    private fun getDefaultOlamaAskPrompt(): String {
        val currentLanguage = languageManager.getCurrentLanguage()
        return when (currentLanguage) {
            Language.VIETNAMESE -> "B·∫°n l√† m·ªôt AI ch·∫°y tr√™n Olama. H√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng m·ªôt c√°ch h·ªØu √≠ch v√† ch√≠nh x√°c."
            Language.ENGLISH -> "You are an AI running on Olama. Please answer the user's question helpfully and accurately."
            else -> "You are an AI running on Olama. Please answer the user's question helpfully and accurately."
        }
    }

    private fun getDefaultAskButtonPrompt(): String {
        val currentLanguage = languageManager.getCurrentLanguage()
        return when (currentLanguage) {
            Language.VIETNAMESE -> "B·∫°n l√† m·ªôt AI chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n. Chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n ƒë∆∞·ª£c cung c·∫•p sang ki·ªÉu ch·ªØ ùíÉùíêùíçùíÖ ùíäùíïùíÇùíçùíäùíÑ. Ch·ªâ tr·∫£ v·ªÅ vƒÉn b·∫£n ƒë√£ chuy·ªÉn ƒë·ªïi m√† kh√¥ng c√≥ gi·∫£i th√≠ch ho·∫∑c ng·ªØ c·∫£nh b·ªï sung."
            Language.ENGLISH -> "You are a text converter. Convert the provided text to ùíÉùíêùíçùíÖ ùíäùíïùíÇùíçùíäùíÑ font style. Only output the converted text without any additional explanation or context."
            else -> "You are a text converter. Convert the provided text to ùíÉùíêùíçùíÖ ùíäùíïùíÇùíçùíäùíÑ font style. Only output the converted text without any additional explanation or context."
        }
    }
    
    private fun getDefaultSpellCheckPrompt(): String {
        val currentLanguage = languageManager.getCurrentLanguage()
        return when (currentLanguage) {
            Language.VIETNAMESE -> "B·∫°n l√† m·ªôt AI ki·ªÉm tra ch√≠nh t·∫£. H√£y ki·ªÉm tra v√† s·ª≠a l·ªói ch√≠nh t·∫£ trong vƒÉn b·∫£n ƒë∆∞·ª£c cung c·∫•p. Ch·ªâ tr·∫£ v·ªÅ vƒÉn b·∫£n ƒë√£ ƒë∆∞·ª£c s·ª≠a l·ªói."
            Language.ENGLISH -> "You are a spell-checking AI. Please check and correct spelling errors in the provided text. Return only the corrected text."
            else -> "You are a spell-checking AI. Please check and correct spelling errors in the provided text. Return only the corrected text."
        }
    }
    
    private fun getDefaultGrammarCheckPrompt(): String {
        val currentLanguage = languageManager.getCurrentLanguage()
        return when (currentLanguage) {
            Language.VIETNAMESE -> "B·∫°n l√† m·ªôt AI ki·ªÉm tra ng·ªØ ph√°p. H√£y ki·ªÉm tra v√† s·ª≠a l·ªói ng·ªØ ph√°p trong vƒÉn b·∫£n ƒë∆∞·ª£c cung c·∫•p. Ch·ªâ tr·∫£ v·ªÅ vƒÉn b·∫£n ƒë√£ ƒë∆∞·ª£c s·ª≠a l·ªói."
            Language.ENGLISH -> "You are a grammar-checking AI. Please check and correct grammar errors in the provided text. Return only the corrected text."
            else -> "You are a grammar-checking AI. Please check and correct grammar errors in the provided text. Return only the corrected text."
        }
    }
    
    private fun getDefaultTranslatePrompt(): String {
        val currentLanguage = languageManager.getCurrentLanguage()
        return when (currentLanguage) {
            Language.VIETNAMESE -> "B·∫°n l√† m·ªôt AI d·ªãch thu·∫≠t. H√£y d·ªãch vƒÉn b·∫£n ƒë∆∞·ª£c cung c·∫•p sang ti·∫øng Anh. Ch·ªâ tr·∫£ v·ªÅ b·∫£n d·ªãch."
            Language.ENGLISH -> "You are a translation AI. Please translate the provided text to Vietnamese. Return only the translation."
            else -> "You are a translation AI. Please translate the provided text to Vietnamese. Return only the translation."
        }
    }
    
    private fun getDefaultSummarizePrompt(): String {
        val currentLanguage = languageManager.getCurrentLanguage()
        return when (currentLanguage) {
            Language.VIETNAMESE -> "B·∫°n l√† m·ªôt AI t√≥m t·∫Øt. H√£y t√≥m t·∫Øt vƒÉn b·∫£n ƒë∆∞·ª£c cung c·∫•p m·ªôt c√°ch ng·∫Øn g·ªçn v√† ch√≠nh x√°c. Ch·ªâ tr·∫£ v·ªÅ b·∫£n t√≥m t·∫Øt."
            Language.ENGLISH -> "You are a summarization AI. Please summarize the provided text concisely and accurately. Return only the summary."
            else -> "You are a summarization AI. Please summarize the provided text concisely and accurately. Return only the summary."
        }
    }
    
    private fun getDefaultRephrasePrompt(): String {
        val currentLanguage = languageManager.getCurrentLanguage()
        return when (currentLanguage) {
            Language.VIETNAMESE -> "B·∫°n l√† m·ªôt AI vi·∫øt l·∫°i. H√£y vi·∫øt l·∫°i vƒÉn b·∫£n ƒë∆∞·ª£c cung c·∫•p v·ªõi c√°ch di·ªÖn ƒë·∫°t kh√°c nh∆∞ng gi·ªØ nguy√™n √Ω nghƒ©a. Ch·ªâ tr·∫£ v·ªÅ vƒÉn b·∫£n ƒë√£ vi·∫øt l·∫°i."
            Language.ENGLISH -> "You are a rephrasing AI. Please rephrase the provided text with different wording while maintaining the same meaning. Return only the rephrased text."
            else -> "You are a rephrasing AI. Please rephrase the provided text with different wording while maintaining the same meaning. Return only the rephrased text."
        }
    }
    
    private fun getDefaultExpandPrompt(): String {
        val currentLanguage = languageManager.getCurrentLanguage()
        return when (currentLanguage) {
            Language.VIETNAMESE -> "B·∫°n l√† m·ªôt AI m·ªü r·ªông. H√£y m·ªü r·ªông vƒÉn b·∫£n ƒë∆∞·ª£c cung c·∫•p v·ªõi th√™m chi ti·∫øt v√† th√¥ng tin b·ªï sung. Ch·ªâ tr·∫£ v·ªÅ vƒÉn b·∫£n ƒë√£ m·ªü r·ªông."
            Language.ENGLISH -> "You are an expansion AI. Please expand the provided text with additional details and information. Return only the expanded text."
            else -> "You are an expansion AI. Please expand the provided text with additional details and information. Return only the expanded text."
        }
    }
    
    private fun getDefaultFormalPrompt(): String {
        val currentLanguage = languageManager.getCurrentLanguage()
        return when (currentLanguage) {
            Language.VIETNAMESE -> "B·∫°n l√† m·ªôt AI chuy·ªÉn ƒë·ªïi vƒÉn phong. H√£y chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n ƒë∆∞·ª£c cung c·∫•p sang vƒÉn phong trang tr·ªçng v√† chuy√™n nghi·ªáp. Ch·ªâ tr·∫£ v·ªÅ vƒÉn b·∫£n ƒë√£ chuy·ªÉn ƒë·ªïi."
            Language.ENGLISH -> "You are a formal writing AI. Please convert the provided text to formal and professional writing style. Return only the converted text."
            else -> "You are a formal writing AI. Please convert the provided text to formal and professional writing style. Return only the converted text."
        }
    }
    
    private fun getDefaultCasualPrompt(): String {
        val currentLanguage = languageManager.getCurrentLanguage()
        return when (currentLanguage) {
            Language.VIETNAMESE -> "B·∫°n l√† m·ªôt AI chuy·ªÉn ƒë·ªïi vƒÉn phong. H√£y chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n ƒë∆∞·ª£c cung c·∫•p sang vƒÉn phong th√¢n thi·ªán v√† kh√¥ng trang tr·ªçng. Ch·ªâ tr·∫£ v·ªÅ vƒÉn b·∫£n ƒë√£ chuy·ªÉn ƒë·ªïi."
            Language.ENGLISH -> "You are a casual writing AI. Please convert the provided text to friendly and informal writing style. Return only the converted text."
            else -> "You are a casual writing AI. Please convert the provided text to friendly and informal writing style. Return only the converted text."
        }
    }

    // Default prompts for new buttons
    private fun getDefaultGPTContinuePrompt(): String {
        val currentLanguage = languageManager.getCurrentLanguage()
        return when (currentLanguage) {
            Language.VIETNAMESE -> "B·∫°n l√† m·ªôt AI ti·∫øp t·ª•c vƒÉn b·∫£n. H√£y ti·∫øp t·ª•c vƒÉn b·∫£n ƒë∆∞·ª£c cung c·∫•p m·ªôt c√°ch t·ª± nhi√™n v√† m·∫°ch l·∫°c. Ch·ªâ tr·∫£ v·ªÅ ph·∫ßn ti·∫øp t·ª•c."
            Language.ENGLISH -> "You are a text continuation AI. Please continue the provided text naturally and coherently. Return only the continuation."
            else -> "You are a text continuation AI. Please continue the provided text naturally and coherently. Return only the continuation."
        }
    }

    private fun getDefaultDeepSeekTranslatePrompt(): String {
        val currentLanguage = languageManager.getCurrentLanguage()
        return when (currentLanguage) {
            Language.VIETNAMESE -> "B·∫°n l√† m·ªôt AI d·ªãch thu·∫≠t. H√£y d·ªãch vƒÉn b·∫£n ƒë∆∞·ª£c cung c·∫•p sang ng√¥n ng·ªØ m·ª•c ti√™u. Ch·ªâ tr·∫£ v·ªÅ b·∫£n d·ªãch."
            Language.ENGLISH -> "You are a translation AI. Please translate the provided text to the target language. Return only the translation."
            else -> "You are a translation AI. Please translate the provided text to the target language. Return only the translation."
        }
    }

    private fun getDefaultGPTSuggestPrompt(): String {
        val currentLanguage = languageManager.getCurrentLanguage()
        return when (currentLanguage) {
            Language.VIETNAMESE -> "B·∫°n l√† m·ªôt AI g·ª£i √Ω. H√£y ƒë∆∞a ra c√°c g·ª£i √Ω h·ªØu √≠ch d·ª±a tr√™n vƒÉn b·∫£n ƒë∆∞·ª£c cung c·∫•p. Ch·ªâ tr·∫£ v·ªÅ c√°c g·ª£i √Ω."
            Language.ENGLISH -> "You are a suggestion AI. Please provide helpful suggestions based on the provided text. Return only the suggestions."
            else -> "You are a suggestion AI. Please provide helpful suggestions based on the provided text. Return only the suggestions."
        }
    }

    private fun getDefaultDeepSeekSuggestPrompt(): String {
        val currentLanguage = languageManager.getCurrentLanguage()
        return when (currentLanguage) {
            Language.VIETNAMESE -> "B·∫°n l√† m·ªôt AI g·ª£i √Ω. H√£y ƒë∆∞a ra c√°c g·ª£i √Ω h·ªØu √≠ch d·ª±a tr√™n vƒÉn b·∫£n ƒë∆∞·ª£c cung c·∫•p. Ch·ªâ tr·∫£ v·ªÅ c√°c g·ª£i √Ω."
            Language.ENGLISH -> "You are a suggestion AI. Please provide helpful suggestions based on the provided text. Return only the suggestions."
            else -> "You are a suggestion AI. Please provide helpful suggestions based on the provided text. Return only the suggestions."
        }
    }



    private fun getDefaultOlamaTranslatePrompt(): String {
        val currentLanguage = languageManager.getCurrentLanguage()
        return when (currentLanguage) {
            Language.VIETNAMESE -> "B·∫°n l√† m·ªôt AI d·ªãch thu·∫≠t. H√£y d·ªãch vƒÉn b·∫£n ƒë∆∞·ª£c cung c·∫•p sang ng√¥n ng·ªØ m·ª•c ti√™u. Ch·ªâ tr·∫£ v·ªÅ b·∫£n d·ªãch."
            Language.ENGLISH -> "You are a translation AI. Please translate the provided text to the target language. Return only the translation."
            else -> "You are a translation AI. Please translate the provided text to the target language. Return only the translation."
        }
    }

    private fun getDefaultGPTTranslatePrompt(): String {
        val currentLanguage = languageManager.getCurrentLanguage()
        return when (currentLanguage) {
            Language.VIETNAMESE -> "B·∫°n l√† m·ªôt AI d·ªãch thu·∫≠t. H√£y d·ªãch vƒÉn b·∫£n ƒë∆∞·ª£c cung c·∫•p sang ng√¥n ng·ªØ m·ª•c ti√™u. Ch·ªâ tr·∫£ v·ªÅ b·∫£n d·ªãch."
            Language.ENGLISH -> "You are a translation AI. Please translate the provided text to the target language. Return only the translation."
            else -> "You are a translation AI. Please translate the provided text to the target language. Return only the translation."
        }
    }

    private fun getDefaultGPTSpellCheckPrompt(): String {
        val currentLanguage = languageManager.getCurrentLanguage()
        return when (currentLanguage) {
            Language.VIETNAMESE -> "B·∫°n l√† m·ªôt AI ki·ªÉm tra ch√≠nh t·∫£. H√£y ki·ªÉm tra v√† s·ª≠a l·ªói ch√≠nh t·∫£ trong vƒÉn b·∫£n ƒë∆∞·ª£c cung c·∫•p. Ch·ªâ tr·∫£ v·ªÅ vƒÉn b·∫£n ƒë√£ s·ª≠a."
            Language.ENGLISH -> "You are a spell check AI. Please check and correct spelling errors in the provided text. Return only the corrected text."
            else -> "You are a spell check AI. Please check and correct spelling errors in the provided text. Return only the corrected text."
        }
    }

    private fun getDefaultDeepSeekSpellCheckPrompt(): String {
        val currentLanguage = languageManager.getCurrentLanguage()
        return when (currentLanguage) {
            Language.VIETNAMESE -> "B·∫°n l√† m·ªôt AI ki·ªÉm tra ch√≠nh t·∫£. H√£y ki·ªÉm tra v√† s·ª≠a l·ªói ch√≠nh t·∫£ trong vƒÉn b·∫£n ƒë∆∞·ª£c cung c·∫•p. Ch·ªâ tr·∫£ v·ªÅ vƒÉn b·∫£n ƒë√£ s·ª≠a."
            Language.ENGLISH -> "You are a spell check AI. Please check and correct spelling errors in the provided text. Return only the corrected text."
            else -> "You are a spell check AI. Please check and correct spelling errors in the provided text. Return only the corrected text."
        }
    }
    
    // Default button names - kh·ªõp ch√≠nh x√°c v·ªõi smartbar
    private fun getDefaultAIAssistantButtonName(): String {
        return getString(R.string.assistants_gpt_button)
    }
    
    private fun getDefaultGPTAskButtonName(): String {
        return getString(R.string.gpt_ask_button_text)
    }
    
    private fun getDefaultDeepSeekAskButtonName(): String {
        return getString(R.string.ask_deepseek_button)
    }
    
    private fun getDefaultOlamaAskButtonName(): String {
        return getString(R.string.olama_ask_button)
    }

    private fun getDefaultAskButtonName(): String {
        return getString(R.string.ask_button_text) // "Convert vƒÉn b·∫£n"
    }
    
    private fun getDefaultGPTContinueButtonName(): String {
        return getString(R.string.gpt_continue_button)
    }
    
    private fun getDefaultDeepSeekTranslateButtonName(): String {
        return getString(R.string.deepseek_translate_button)
    }
    
    private fun getDefaultGPTSuggestButtonName(): String {
        return getString(R.string.gpt_suggest_button)
    }
    
    private fun getDefaultDeepSeekSuggestButtonName(): String {
        return getString(R.string.deepseek_suggest_button)
    }
    
    private fun getDefaultOlamaTranslateButtonName(): String {
        return getString(R.string.olama_translate_button)
    }
    
    private fun getDefaultGPTTranslateButtonName(): String {
        return getString(R.string.gpt_translate_button_text)
    }
    
    private fun getDefaultGPTSpellCheckButtonName(): String {
        return getString(R.string.gpt_spell_check_button)
    }
    
    private fun getDefaultDeepSeekSpellCheckButtonName(): String {
        return getString(R.string.deepseek_spell_check_button)
    }
    
        companion object {
        fun getPrompt(context: android.content.Context, promptType: String): String {
            val prefs = context.getSharedPreferences("AIKeyboardPrefs", android.content.Context.MODE_PRIVATE)
            val isEnabled = prefs.getBoolean("prompt_enabled_$promptType", false)
            if (!isEnabled) return "" // Return empty if disabled
            
            return when (promptType) {
                "ai_assistant" -> prefs.getString("prompt_ai_assistant", "") ?: ""
                "gpt_ask" -> prefs.getString("prompt_gpt_ask", "") ?: ""
                "deepseek_ask" -> prefs.getString("prompt_deepseek_ask", "") ?: ""
                "olama_ask" -> prefs.getString("prompt_olama_ask", "") ?: ""
                "gpt_continue" -> prefs.getString("prompt_gpt_continue", "") ?: ""
                "deepseek_translate" -> prefs.getString("prompt_deepseek_translate", "") ?: ""
                "gpt_suggest" -> prefs.getString("prompt_gpt_suggest", "") ?: ""
                "deepseek_suggest" -> prefs.getString("prompt_deepseek_suggest", "") ?: ""
                "ask_button" -> prefs.getString("prompt_ask_button", "") ?: ""
                "olama_translate" -> prefs.getString("prompt_olama_translate", "") ?: ""
                "gpt_translate" -> prefs.getString("prompt_gpt_translate", "") ?: ""
                "gpt_spell_check" -> prefs.getString("prompt_gpt_spell_check", "") ?: ""
                "deepseek_spell_check" -> prefs.getString("prompt_deepseek_spell_check", "") ?: ""
                else -> ""
            }
        }

        fun getButtonName(context: android.content.Context, buttonType: String): String {
            val prefs = context.getSharedPreferences("AIKeyboardPrefs", android.content.Context.MODE_PRIVATE)
            return when (buttonType) {
                "ai_assistant" -> prefs.getString("button_name_ai_assistant", "AI Assistant") ?: "AI Assistant"
                "gpt_ask" -> prefs.getString("button_name_gpt_ask", "GPT Ask") ?: "GPT Ask"
                "deepseek_ask" -> prefs.getString("button_name_deepseek_ask", "DeepSeek Ask") ?: "DeepSeek Ask"
                "olama_ask" -> prefs.getString("button_name_olama_ask", "Olama Ask") ?: "Olama Ask"
                "gpt_continue" -> prefs.getString("button_name_gpt_continue", "GPT Continue") ?: "GPT Continue"
                "deepseek_translate" -> prefs.getString("button_name_deepseek_translate", "DeepSeek Translate") ?: "DeepSeek Translate"
                "gpt_suggest" -> prefs.getString("button_name_gpt_suggest", "GPT Suggest") ?: "GPT Suggest"
                "deepseek_suggest" -> prefs.getString("button_name_deepseek_suggest", "DeepSeek Suggest") ?: "DeepSeek Suggest"
                "ask_button" -> prefs.getString("button_name_ask_button", "Convert vƒÉn b·∫£n") ?: "Convert vƒÉn b·∫£n"
                "olama_translate" -> prefs.getString("button_name_olama_translate", "Olama Translate") ?: "Olama Translate"
                "gpt_translate" -> prefs.getString("button_name_gpt_translate", "GPT Translate") ?: "GPT Translate"
                "gpt_spell_check" -> prefs.getString("button_name_gpt_spell_check", "GPT Spell Check") ?: "GPT Spell Check"
                "deepseek_spell_check" -> prefs.getString("button_name_deepseek_spell_check", "DeepSeek Spell Check") ?: "DeepSeek Spell Check"
                else -> ""
            }
        }
    }
} 